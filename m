Return-Path: <linux-kernel+bounces-194582-lists+linux-kernel=lfdr.de@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from sv.mirrors.kernel.org (sv.mirrors.kernel.org [139.178.88.99])
	by mail.lfdr.de (Postfix) with ESMTPS id 2B17D8D3E8E
	for <lists+linux-kernel@lfdr.de>; Wed, 29 May 2024 20:50:45 +0200 (CEST)
Received: from smtp.subspace.kernel.org (wormhole.subspace.kernel.org [52.25.139.140])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by sv.mirrors.kernel.org (Postfix) with ESMTPS id DB64D2864C0
	for <lists+linux-kernel@lfdr.de>; Wed, 29 May 2024 18:50:43 +0000 (UTC)
Received: from localhost.localdomain (localhost.localdomain [127.0.0.1])
	by smtp.subspace.kernel.org (Postfix) with ESMTP id 051571C230B;
	Wed, 29 May 2024 18:50:39 +0000 (UTC)
Received: from angie.orcam.me.uk (angie.orcam.me.uk [78.133.224.34])
	by smtp.subspace.kernel.org (Postfix) with ESMTP id CA4CE1386A7;
	Wed, 29 May 2024 18:50:35 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=78.133.224.34
ARC-Seal:i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1717008638; cv=none; b=lx1Id/sQvwwvR/NbQcF1Yo8IEs8vN8moGb+xUpJmPlxf7ryWFWA2qg9n3GGzY4FYgWN7y4cc4AnM2NDr0H0eZPLwVrSh40489RHcygQM0UtFUN255ozYJAocpU5TeG0L0jmEiA0WZR9feuXmxdjY9ybIlxhzKKyHhjhoBdCUrIE=
ARC-Message-Signature:i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1717008638; c=relaxed/simple;
	bh=4zhxO8s80sghmwZ6xTs9Tn3DwRhHd0HONhAed0apv1A=;
	h=Date:From:To:cc:Subject:In-Reply-To:Message-ID:References:
	 MIME-Version:Content-Type; b=eOe44F64YrF5JbvU6FQxi5IYyu1RfY4EK8kKeayOgO9wyRX5vMAivWLOpEzxhJ5lcbCYaYcS17JME1D4okR3PpkrdY559rR/6rY9N0SK1KNEIEGRr4Fy9zXInuL6Xie8VIQkm+Xy7Md861j4yCFYKcPk8pr1TbAMafVyN4fL9MM=
ARC-Authentication-Results:i=1; smtp.subspace.kernel.org; dmarc=none (p=none dis=none) header.from=orcam.me.uk; spf=none smtp.mailfrom=orcam.me.uk; arc=none smtp.client-ip=78.133.224.34
Authentication-Results: smtp.subspace.kernel.org; dmarc=none (p=none dis=none) header.from=orcam.me.uk
Authentication-Results: smtp.subspace.kernel.org; spf=none smtp.mailfrom=orcam.me.uk
Received: by angie.orcam.me.uk (Postfix, from userid 500)
	id 2B10892009C; Wed, 29 May 2024 20:50:28 +0200 (CEST)
Received: from localhost (localhost [127.0.0.1])
	by angie.orcam.me.uk (Postfix) with ESMTP id 23E9192009B;
	Wed, 29 May 2024 19:50:28 +0100 (BST)
Date: Wed, 29 May 2024 19:50:28 +0100 (BST)
From: "Maciej W. Rozycki" <macro@orcam.me.uk>
To: "Paul E. McKenney" <paulmck@kernel.org>
cc: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>, 
    Arnd Bergmann <arnd@kernel.org>, linux-alpha@vger.kernel.org, 
    Arnd Bergmann <arnd@arndb.de>, 
    Richard Henderson <richard.henderson@linaro.org>, 
    Ivan Kokshaysky <ink@jurassic.park.msu.ru>, 
    Matt Turner <mattst88@gmail.com>, Alexander Viro <viro@zeniv.linux.org.uk>, 
    Marc Zyngier <maz@kernel.org>, 
    Linus Torvalds <torvalds@linux-foundation.org>, 
    linux-kernel@vger.kernel.org, Michael Cree <mcree@orcon.net.nz>, 
    Frank Scheiner <frank.scheiner@web.de>
Subject: Re: [PATCH 00/14] alpha: cleanups for 6.10
In-Reply-To: <aa397ad5-a08a-48a1-a9c0-75cfd5f6a3a5@paulmck-laptop>
Message-ID: <alpine.DEB.2.21.2405291432450.23854@angie.orcam.me.uk>
References: <20240503081125.67990-1-arnd@kernel.org> <272a909522f2790a30b9a8be73ab7145bf06d486.camel@physik.fu-berlin.de> <alpine.DEB.2.21.2405280041550.23854@angie.orcam.me.uk> <aa397ad5-a08a-48a1-a9c0-75cfd5f6a3a5@paulmck-laptop>
User-Agent: Alpine 2.21 (DEB 202 2017-01-01)
Precedence: bulk
X-Mailing-List: linux-kernel@vger.kernel.org
List-Id: <linux-kernel.vger.kernel.org>
List-Subscribe: <mailto:linux-kernel+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-kernel+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII

On Tue, 28 May 2024, Paul E. McKenney wrote:

> > > > This topic came up again when Paul E. McKenney noticed that
> > > > parts of the RCU code already rely on byte access and do not
> > > > work on alpha EV5 reliably, so I refreshed my series now for
> > > > inclusion into the next merge window.
> > > 
> > > Hrrrm? That sounds like like Paul ran tests on EV5, did he?
> > 
> >  What exactly is required to make it work?
> 
> Whatever changes are needed to prevent the data corruption that can
> currently result in code generated by single-byte stores.  For but one
> example, consider a pair of tasks (or one task and an interrupt handler
> in the CONFIG_SMP=n case) do a single-byte store to a pair of bytes
> in the same machine word.  As I understand it, in code generated for
> older Alphas, both "stores" will load the word containing that byte,
> update their own byte, and store the updated word.
> 
> If two such single-byte stores run concurrently, one or the other of those
> two stores will be lost, as in overwritten by the other.  This is a bug,
> even in kernels built for single-CPU systems.  And a rare bug at that, one
> that tends to disappear as you add debug code in an attempt to find it.

 Thank you for the detailed description of the problematic scenario.

 I hope someone will find it useful, however for the record I have been 
familiar with the intricacies of the Alpha architecture as well as their 
implications for software for decades now.  The Alpha port of Linux was 
the first non-x86 Linux platform I have used and actually (and I've chased 
that as a matter of interest) my first ever contribution to Linux was for 
Alpha platform code:

On Mon, 30 Mar 1998, Jay.Estabrook@digital.com wrote:

> Hi, sorry about the delay in answering, but you'll be happy to know, I took
> your patches and merged them into my latest SMP patches, and submitted them
> to Linus just last night. He promises them to (mostly) be in 2.1.92, so we
> can look forward to that... :-)

so I find the scenario you have described more than obvious.

 Mind that the read-modify-write sequence that software does for sub-word 
write accesses with original Alpha hardware is precisely what hardware 
would have to do anyway and support for that was deliberately omitted by 
the architecture designers from the ISA to give it performance advantages 
quoted in the architecture manual.  The only difference here is that with 
hardware read-modify-write operations atomicity for sub-word accesses is 
guaranteed by the ISA, however for software read-modify-write it has to be 
explictly coded using the usual load-locked/store-conditional sequence in 
a loop.  I don't think it's a big deal really, it should be trivial to do 
in the relevant accessors, along with the memory barriers that are needed 
anyway for EV56+ and possibly other ports such as the MIPS one.

 What I have been after actually is: can you point me at a piece of code 
in our tree that will cause an issue with a non-BWX Alpha as described in 
your scenario, so that I have a starting point?  Mind that I'm completely 
new to RCU as I didn't have a need to research it before (though from a 
skim over Documentation/RCU/rcu.rst I understand what its objective is).

 FWIW even if it was only me I think that depriving the already thin Alpha 
port developer base of any quantity of the remaining manpower, by dropping 
support for a subset of the hardware available, and then a subset that is 
not just as exotic as the original i386 became to the x86 platform at the 
time support for it was dropped, is only going to lead to further demise 
and eventual drop of the entire port.

 And I think it would be good if we kept the port, just as we keep other 
ports of historical significance only, for educational reasons if nothing 
else, such as to let people understand based on an actual example, once 
mainstream, the implications of weakly ordered memory systems.

  Maciej


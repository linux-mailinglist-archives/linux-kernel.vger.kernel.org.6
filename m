Return-Path: <linux-kernel+bounces-442909-lists+linux-kernel=lfdr.de@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from sv.mirrors.kernel.org (sv.mirrors.kernel.org [IPv6:2604:1380:45e3:2400::1])
	by mail.lfdr.de (Postfix) with ESMTPS id 86E529EE3D3
	for <lists+linux-kernel@lfdr.de>; Thu, 12 Dec 2024 11:12:41 +0100 (CET)
Received: from smtp.subspace.kernel.org (wormhole.subspace.kernel.org [52.25.139.140])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by sv.mirrors.kernel.org (Postfix) with ESMTPS id 4143E287C10
	for <lists+linux-kernel@lfdr.de>; Thu, 12 Dec 2024 10:12:40 +0000 (UTC)
Received: from localhost.localdomain (localhost.localdomain [127.0.0.1])
	by smtp.subspace.kernel.org (Postfix) with ESMTP id 31F332101AF;
	Thu, 12 Dec 2024 10:12:36 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=kernel.org header.i=@kernel.org header.b="h4BeYANo"
Received: from smtp.kernel.org (aws-us-west-2-korg-mail-1.web.codeaurora.org [10.30.226.201])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 81FF91F949
	for <linux-kernel@vger.kernel.org>; Thu, 12 Dec 2024 10:12:35 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=10.30.226.201
ARC-Seal:i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1733998355; cv=none; b=QMqqEJt8R6sCc41kSMyLYr0i/nh/tk6O6nuEQRhl77U4qI0A/6sanWrszV6cj+D+Zoj2d8YO0mjeHYNh6mkQm47W7U5p907oXKxXYHkEC2M1HGchBdB6UP68lzu9UrDQzc/cYIyKXH1k/9QK2KfT0kx/gf3uc3QIyubAYklFOcs=
ARC-Message-Signature:i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1733998355; c=relaxed/simple;
	bh=pI0CmbiNGAceIkukqgmpuyvpA4axUQGsh7I3w5JgAa0=;
	h=Date:Message-ID:From:To:Cc:Subject:In-Reply-To:References:
	 MIME-Version:Content-Type; b=fUyIIJMDrt8fZpc3k/wG4yJ6+GwBcOmpOmuHVr00xBEss1KO3Hin5xXNMsCAKib/4iJb63fjImH2aTEcdb0NpEeD55psSmEL0tcI9XXANLwUBSllzHVLdzmTeU4sAbp+Wabntgl8fOylJyRAclhm9KiJk5PXhwf9968Zztok75Y=
ARC-Authentication-Results:i=1; smtp.subspace.kernel.org; dkim=pass (2048-bit key) header.d=kernel.org header.i=@kernel.org header.b=h4BeYANo; arc=none smtp.client-ip=10.30.226.201
Received: by smtp.kernel.org (Postfix) with ESMTPSA id 0EA19C4CECE;
	Thu, 12 Dec 2024 10:12:35 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
	s=k20201202; t=1733998355;
	bh=pI0CmbiNGAceIkukqgmpuyvpA4axUQGsh7I3w5JgAa0=;
	h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
	b=h4BeYANovPTKYcwkpZN7ak0uJ5p9MrVFewFPknskoPuwVIq8Vg0xaUyOkPeOcSqvZ
	 1N+66kK65+7cfajzy6k9VtSK+0tjeejNyOHJhww+Z6UvJfHtbLfzDlM4swY5E+86Kc
	 25PDhxPKr2r1MUymedHAOy6LCzhVBbVWUtbIZprmxOn4WPC1Mh5069dz33g0FcOX0J
	 MvLaSjlhbPSRxae6MriZIy7GtcDbSZzeh7lreO02oSJvC4uB9M5UHarmb45xV3wxaw
	 5C3phAiaeOYabII826uqaLooo1sCpA/AGAPi0y2MsnmGVr4F/zGMN1hPRKn2P/dL7I
	 xAuR68oxFE7/A==
Received: from sofa.misterjones.org ([185.219.108.64] helo=goblin-girl.misterjones.org)
	by disco-boy.misterjones.org with esmtpsa  (TLS1.3) tls TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
	(Exim 4.95)
	(envelope-from <maz@kernel.org>)
	id 1tLgBM-0031y9-Ph;
	Thu, 12 Dec 2024 10:12:33 +0000
Date: Thu, 12 Dec 2024 10:12:32 +0000
Message-ID: <86ldwlryzz.wl-maz@kernel.org>
From: Marc Zyngier <maz@kernel.org>
To: richard clark <richard.xnu.clark@gmail.com>
Cc: linux-arm-kernel@lists.infradead.org,
	linux-kernel@vger.kernel.org,
	will@kernel.org,
	"Russell King (Oracle)" <linux@armlinux.org.uk>,
	Mark Rutland <mark.rutland@arm.com>,
	Linus Torvalds <torvalds@linux-foundation.org>
Subject: Re: Question about interrupt prioriyt of ARM GICv3/4
In-Reply-To: <CAJNi4rPDVXS3Ft3nHLXvMzHmn9d10Nz4Pxeduoe+v5HaK=CEAg@mail.gmail.com>
References: <CAJNi4rMfhZOCT+7Ki14vUs+dZbv9cxCZ0s+jgn6=_om4NTgo_A@mail.gmail.com>
	<86cyi5tanz.wl-maz@kernel.org>
	<CAJNi4rPDVXS3Ft3nHLXvMzHmn9d10Nz4Pxeduoe+v5HaK=CEAg@mail.gmail.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/29.4
 (aarch64-unknown-linux-gnu) MULE/6.0 (HANACHIRUSATO)
Precedence: bulk
X-Mailing-List: linux-kernel@vger.kernel.org
List-Id: <linux-kernel.vger.kernel.org>
List-Subscribe: <mailto:linux-kernel+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-kernel+unsubscribe@vger.kernel.org>
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
X-SA-Exim-Connect-IP: 185.219.108.64
X-SA-Exim-Rcpt-To: richard.xnu.clark@gmail.com, linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org, will@kernel.org, linux@armlinux.org.uk, mark.rutland@arm.com, torvalds@linux-foundation.org
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org); SAEximRunCond expanded to false

On Thu, 12 Dec 2024 09:18:56 +0000,
richard clark <richard.xnu.clark@gmail.com> wrote:
>=20
> Hi M,

Hi r,

>=20
> On Fri, Dec 6, 2024 at 5:37=E2=80=AFPM Marc Zyngier <maz@kernel.org> wrot=
e:
> >
> > On Fri, 06 Dec 2024 08:33:11 +0000,
> > richard clark <richard.xnu.clark@gmail.com> wrote:
> > >
> > > Hi,
> > > Currently seems the GICv3/4 irqchip configures all the interrupts as
> > > the same priority, I am thinking about to minimize the latency of the
> > > interrupt for a particular device, e.g, the arm arch_timer in the RTL
> > > system. The question is,
> > > 1. Why don't we provide a /proc or /sys interface for the enduser to
> > > set the priority of a specific interrupt(SPI/PPI)?
> >
> > I'm afraid this really has nothing to do with any particular interrupt
> > architecture.
> >
> > Before thinking of exposing the interrupt priority to userspace, you
> > should look at what this translates into for the kernel once you allow
> > interrupts to be preempted by another one with a higher priority.
> >
> Interrupt priority doesn't necessarily mean the preemption, seems
> you're talking about the interrupt preemption harm according to your
> statement followed.Frankly I am just thinking higher priority will win
> the lower ones in case massive external interrupts received in the GIC
> level (you see I am still talking about GIC, not kernel)

As I stated at the end of my email, the GIC only gives guarantee that
you will ack the highest priority interrupt in finite time. Not right
when it is made pending. Yes, it has the concept of HPPI. But that
from the PoV of the CPU interface, not that of the distributor. Factor
in the Stream interface, and you realise that expecting to always ack
the highest priority pending interrupt is akin to expecting no
reordering of packets in a network.

> >
> > This means that at every point where you would normally see a
> > local_irq_save(), spinlock_irqsave() or equivalent, you would need to
> > explicitly specify the priority that you allow for preemption. You
> > should then make sure that any code that can be run during an
> > interrupt is reentrant. You need to define which data structures can
> > be manipulated at which priority level... The list goes on.
> >
> irqsave just masks the interrupt from the point of cpu, I don't think
> it will mess things up if preemption really happens (no? then what the
> side-effect is for the nested interrupt handling in the softirq part.
> damage the semantic of the lock primitives?)
> >
> > If you want a small taste of the complexity, just look at what
> > handling NMIs (or even pseudo-NMIs in the case of GICv3) means, and
> > generalise it to not just two, but an arbitrary range of priorities.
> >
> > If you want the full blown experience, look at the BSDs and their use
> > of spl*(). I don't think anyone has any plan to get there, and the RT
> > patches have shown that there is little need for it.
> >
> As supplement=EF=BC=8Cthe fiq is suggested to be used as an alternative t=
o the
> higher priority in the RT area...

<PulpFiction>
FIQ's dead, baby. FIQ's dead.
</PulpFiction>

> >
> > > 2. Is there any way to verify the higher priority interrupt will have
> > > more dominant to be selected to the CPU (IOW, the priority is really
> > > working) in case of multiple different interrupts asserted to the GIC
> > > at the same time(some debug registers of GIC like GICD_REEMPT_CNT :-)
> > > to record higher priority wins)?
> >
> > The GIC architecture makes no promise that the interrupt you
> > acknowledge is the highest priority pending interrupt, because this is
> > by definition a very racy process.
> >
> > Also, even on busy systems, you will very rarely see two interrupts
> > targeting the same CPU being made pending at the same time, so that
> > the interrupt delivery system would have to arbitrate between the two.
> > That's because interrupts are vanishingly rare in the grand scheme of
> > things.
> >
> 1. I am trying to stress the external interrupts to the core#0 via the
> stress-ng tool with one of interrupt being configured as higher
> priority to see the benchmark data, it's time consuming as you can
> image, still is in progress(BTW, I can't see any lockup similar hang
> in the system with a higher priority configured)

If you don't have preemption, I don't think anything wrong will
happen. But I don't expect any benefit either.

> 2. This raises a very interesting question and I am also very curious
> about is, what is the purpose for the GIC to introduce the interrupt
> priority features, a placeholder feature reserved for the future? Ah,
> hardware prefer to provide more functionalities than its being
> actually used by software, any other justification except that?

You realise that the HW is not exclusively designed for Linux, right?

	M.

--=20
Without deviation from the norm, progress is not possible.

